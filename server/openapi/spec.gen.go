// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RZXW8TRxf+K9G876WJ7UAv6rsCbRX1KwJy0yiqJrsnzlDvzDIzG9eNLBFbtIWWNuUi",
	"VSgXqEJUIuKjH6qAAvkxW+fjX1Qzs17vesfxmthJkSJlMzkz55zneeac4/UacpjnMwpUClRZQ8JZAQ/r",
	"xxqrEqoefM584JKAXvaxEHXGXfXsgnA48SVhFFVQ2P4xbD0L24/D9ouwfR0VEHyBPb8GqNLbVUDLjHtY",
	"ptdkw1dWQnJCq6hZQIEATrEHNi/31fmtv8L2i87GzZSXeFfmxGYBcbgSEA4uqiwkDeMoFuNNbOkyOFKF",
	"YQJIAzBKaDmjsLmmUJ/DVYv/JeY21O9e2nXyOQnbt7Xvp+H6o85X1zqPntlgdThgyXh6O6tT4DbrbpZJ",
	"Gqtgs/QxBypnz6esy7EhoRKqwDMAxNsiXwWTXC9OGzD+ZFAB9zOlyuQJM6WZ8qmS+rlUKlX0z6dJAbtY",
	"wilJPDg61MQdBt1odMiVtGVRLRUlKw7aEvjuuDHoI5u4KIrMyrbxnQpkuA7eWRKSY0dm9ZAH0NeASRJZ",
	"6yPBLI2Svdlhz0k6Kyd97cepRRsKI1x1RqtZJDwQIoIo4V6ZDnPf3WnzJXF1kIr6qnxrJ2w90UUrH0a2",
	"7f2dS3nPD96A+E3IEjz98H8Oy6iC/lfsdfhi1N6Lyl0zPgRzjhuoqfwRusyyMdc5keCyOo3Fm15bBS6M",
	"ZXm6NF1SRzMfKPYJqqDT06Xp05H4dWD6cplZggl9dRXkWPmadVEFzTEh57SJyR+EPBuJ32FUAtV7sO/X",
	"iKN3FS8LRnvTy7Dku521mQZY8gD0gvAZFSbAmVJ5bG792Gca3HOm+k2JwHFAiOWgVmto7kXgeZg3LDf9",
	"n5d3dr/ZQF3SF5BBdFHtMugWIzlXwQLw+2DwvaRF52OOPZDA1UlrSM186EoAvNFVm1an1nsarEIi8VjJ",
	"M5amv5hBtTQSqrkknWoHVm2nYf/kA2V1pnQmK/ePmZx6jwXU7aPBXN1wfbvz+FVn5064vhW2vk3x8vTq",
	"/v1fw9atzg+bnVc/ZQiK/k7ytKZ+zZ5vmihqICHL13m9rimb09YDWEs2V1OQ87JWzsWaBSoT2kji7Vy/",
	"cbB1zyLewuFqPdHUSxMvAxdAcgKrI2Jp19lid5SwFNfuhHHseI6/kPempVylfPIczpvZdRQGd3/+c3fz",
	"yaGlvFsiis4KqblDq7rh9Zy2fRMuy0Sq++vdpocb8Z8Db5aFl6jX5i7fg/vueJkpHLmbj8C3vbta/nUW",
	"u1MXTDXI04EL6C3bKbNUAqe4NnUR+CrwqXc5Z7y/Xye4jXp369aA9hO35lxd6LgYnGQj0vmOaTDKAD1s",
	"ACoMm/1PAOfxNyj9MSt3a/pv36Dt+Abt77zs3Lg7ZLgl9PDPH0R/XJ9ch2a0OkjcqQz3Nr8/uHp775fn",
	"+w9uJlNS8ZlUAgFcFHtvwwfqdl4ZfqjtJiMnE8NxCKqctZmnOJArjJMv4aiaeqh1dC9s/5FAXMOMCtHX",
	"DknozVuUQUrSqH8EkxSTB7mktP/1g/3n26oEJr4H2G1f69z9LVMOTbbJLAWp0sDPobCLxvBNl9jbWZtz",
	"jC7XiBnwjiCvHvh7W38ffPf7YSKLX5wt9PvqKwzdRmPekWZekCUnyXRbEhbzZIw9axOczbq/u6ZmOfuW",
	"1B2LjCNyF5v/BgAA//8MvKLc9hsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
