// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RZ227bRhN+FWP//5KxZCe9qO6apC2MnowkvqlhFDQ5ljcVd5ndpVXVEBBLSNukTevm",
	"woXTXARFkAIxcugBRZIm8cOw8uEtit2lRFJcSlQs2Q1gQBQ9uzPzfd/ODKl15FDPpwSI4KiyjrizCp6t",
	"Lmu0iom88Bn1gQkM6rZvc16nzJXXLnCHYV9gSlAFhe0fw9azsP04bL8I29eRheAL2/NrgCrxKgutUObZ",
	"In1PNHxpxQXDpIqaFgo4MGJ7YPJyX+7f+itsv+hs3kx5oXUCLLtd00IMrgSYgYsqi/HeVhzCUm8RXb4M",
	"jpAxaO/p7I8lLlMwBOrzdtUQ0TJ1G/Iz9lbHn+OwfVtF8zTceNT56lrn0TMTyg4DW1CWXp4TrIW6eSdZ",
	"rYLJ0rcZEDF3PmU90zPEREAVWAaA3rLIl6WTi+M0AeNPBhVwP5MiTe4wW56dOVWWf5fK5Yr6+zSpZ9cW",
	"cEpgD44ONXZThrNZ6EajQ6ymLUvyVknQUt6SwHfHjUEf2dhFUWRGtrXvVCDDdfDOMhfMdkRWD0UAfQ2Y",
	"BBa1QiQMSF7vYU5JOKsnferHKUUTCiOcdEqqWSQ84DyCKOFemg5z311p8iXsap6I+sp+azdsPVE1a1Cl",
	"izEyLe/vF9J7cfBy4tchC/DUxf8ZrKAK+l8p7velqNmXpLtmbxObMbuBmtIfJis0G3OdYQEurZOeeNP3",
	"1oBxbTkzXZ4uy62pD8T2Maqg09Pl6dOR+FVg6mzpyYJydXIl5Lb0NeeiCpqnXMwrE50/cHE2Er9DiQCi",
	"1ti+X8OOWlW6zCmJZ5lhyXcbazMNsGABqBvcp4TrAGfLM2Nz6/d8psE9p4vfFA8cBzhfCWq1huKeB55n",
	"s4bhpP/z8s7eN5uoS/oi0oguyVUa3VIk5yoYAH4fNL6XlOh8m9keCGByp3UkJ0B0JQDW6KpNqVPpPQ2W",
	"lUh8YM9fyqBaHgnVQpJOdQOjttOwf/KBtDpTPpOV+8dUTL1HA+L20aCPbrix03n8qrN7J9zYDlvfpnh5",
	"evXg/q9h61bnh63Oq58yBEXfkzyty4+5800dRQ0EZPk6r+4ryuaVdQ5ryd6qC3JR1mYLsWaASoc2kng7",
	"128cbt8ziNcarNYTTb088TJwAQTDsDYilmadLXVHCUNx7U4Yx47n+At5PC0VKuWT53BBj66jMLj38597",
	"W08GlvJuiSg5q7jmDq3qmtdzynbc5L4x1f31TtPDzd7X3JNl4CXqtYXLd37fHS8z1nF2c3N3NfzrrO1O",
	"XdDVoEgHttBbpl3miABG7NrURWBrwKbeZYyy/n6d4Dbq3a1bOe2n15oLdaHjYnCSjUjlO6bBKAP0sAHI",
	"Gjb7nwDO429Q6jGrcGv6b5+gnd4JOth92blxd8hwi8ng5w+sHtcn16EpqeaJO5Xh/tb3h1dv7//y/ODB",
	"zWRKMj6dSsCB8VL8bjxXtwvS8ENlNxk56RiOQ1AzWZsFYgdilTL8JRxVUw+Vju6F7T8SiCuYkRX9CJGE",
	"Xr9FyVOSQv0jmKSYPCgkpYOvHxw835ElMPHDwF77Wufub5lyqLNNZslxlQR+AYVd1IZvusTeztqco2Sl",
	"hvWAdwR5xeDvb/99+N3vg0TWe3G22O+rrzB0G41+R5p5QZacJNNtiRvMkzHG1jo4k3V/d03NcuYlqTMW",
	"GUfkLjX/DQAA//9vM4xCBBwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
