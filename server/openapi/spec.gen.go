// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RZW08bxxf/Kmj+/0cHG5I+1G8NtBXqDSXhpQhVw+7BTOqd2czM4rrIUrCVtkmbluaB",
	"ijQPURWlUlAuvahK0iR8mK25fItqZtbrXe8Yr4MNjYTEMpwz55zf+Z2L1+vIYZ7PKFApUHkdCWcVPKwf",
	"q6xCqHrwOfOBSwL62MdC1Bh31bMLwuHEl4RRVEZh68ew+SxsPQ5bL8LWdVRA8AX2/CqgclergFYY97BM",
	"n8m6r6SE5IRWUKOAAgGcYg9sVu6r+5t/ha0X7c2bKSuxVubGRgFxuBIQDi4qLyYFYy+WYiW2fBkcqdww",
	"DqQBGMa1nF7YTFOozeOKxf4yc+vqdzfsGvmchK3b2vbTcONR+6tr7UfPbLA6HLBkPK3OahS4TboTZTKN",
	"FbBJ+pgDlXOzKempWJBQCRXgGQBitchWwQTX9dMGjD8eVMD9TLEyecN0aXrqTEn9XCqVyvrn0ySBXSzh",
	"jCQeHB9q4g6Cbrh0yNW0ZFEdFSUr9lMJfHfUGPQkm7go8syabWM75chgHryzLCTHjszyIQ+grwGTJLLa",
	"kwRzNEz0RsMek3RWT7vsR8lFGwpDlDqjlSwSHggRQZQwr0QHme9o2mxJXOnHop4u39wNm09008qHkU29",
	"d3Ip6/nB6+O/cVmCpx/+z2EFldH/it0JX4zGe1GZa8SXYM5xHTWUPUJXWNbnGicSXFajMXnTZ2vAhZGc",
	"mixNltTVzAeKfYLK6OxkafJsRH7tmC4us0swoUtXQY6VrTkXldE8E3Jei5j4QcjzEfkdRiVQrYN9v0oc",
	"rVW8LBjtbi+Dgu9M1kYaYMkD0AfCZ1QYB6dLUyMz68c20+DOmO43IQLHASFWgmq1rnMvAs/DvG6p9H9e",
	"3tn7ZhN1kr6IDKJLSsugW4zoXAELwO+DwfeSJp2POfZAAlc3rSO186ErAfB6h22anZrvabAKicCPHPpL",
	"GVRLQ6Gai9KpcWDldhr2Tz5QUudK57J0/5jJifdYQN2eNJjSDTd22o9ftXfvhBvbYfPbVF6eXj24/2vY",
	"vNX+Yav96qdMgqK/k3laV7/mZhvGiypIyOZrVp/rlM1r6T5ZSw5X05BHmzULVMa1ocjbvn7jcPuehbyF",
	"o9l6qqGXxt4GLoDkBNaGxNLOs6XOKmFprp0N48TxHH0j725LuVr5+HO4YHbXYTK49/Ofe1tPjmzlnRZR",
	"dFZJ1R3Y1U1eZ7Tsm1AsY+nur1dNDzfjP/tWliUv0azN3b77z93RZqZwktPcPl0t/zqP3YkLphvkmcAF",
	"9JbtljkqgVNcnbgIfA34xLucM947rxO5jWZ381af8ROP5lxT6KQyOM5BpOMd0WKUAXrQAlQYtPufAs6j",
	"H1D6Y1bu0fTfrqCduIIOdl+2b9wdsNwSevTnD6I/ro9vQjNa6UfuVIT7W98fXr29/8vzgwc3kyEp/0wo",
	"gQAuit234X15u6AEP9Ry46GT8eEkCDWVlVmgOJCrjJMv4biceqh5dC9s/ZFAXMOMCtHXDknozVuUfkzS",
	"qH8E4ySTB7modPD1g4PnO6oFJr4H2Gtda9/9LdMOTbTJKAWp0MDPwbCLRvBNp9jbWZkZRleqxCx4x6BX",
	"F/z97b8Pv/v9KJLFL84We231NIbOoDHvSDMvyJKbZHosCYt40seutHHOJt07XVO7nF0lVWORcJTcpca/",
	"AQAA///005Vd9hsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
