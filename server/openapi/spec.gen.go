// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYW28Txxf/KtH8/48mtgN9qN8KtFXUWwTkpVFUTXZPnKHemWVmNq4bWSK2aAstbcpD",
	"qlAeUIWoRMSlF1VAgXyYrXP5FtXM2N5d72y8JnZSpEheb86Zc87v/M7Fs4Yc5vmMApUCVdaQcFbAw/qx",
	"xqqEqgefMx+4JKBf+1iIOuOuenZBOJz4kjCKKihs/xi2noXtx2H7Rdi+jgpomXEPS1SJlApINnxAFSQk",
	"J7SKmgUUCOAUe2A78L46qvVX2H7R2biZVm4WEIcrAeHgospCdFIhMrjYV2JLl8GRyqKxlQxrAl7YTFOo",
	"z+Gqxf4ScxvqE77Anl9TSnXyOQnbt7Xtp+H6o85X1zqPntkQdDhgyXhSndUpcJt0L8pI1FceWSR9zIHK",
	"2fMJ6XJfkFAJVeApAPpqXVsFE1zkpw0YfzKogPuZImD8hJnSTPlUSf1dKpUq+u/TOFddLOGUJB4cHWri",
	"DoNutHTIlaRkUb0qSlbMUgl8d9wYDCSbuKjrmTXbxnbCkeE8eGdJSI4dmeZDHkBfAyZJZG0gCebVKNEb",
	"DXtM0lk56bIfJxdtKIxQ6oxW00h4IEQXoph5JTrMfE/TZkviahaLBrp8aydsPdFNKxsXm0qekRABlOGj",
	"cUuCpx/+z2EZVdD/itFsLnYHc1EF1OwfgjnHDdRU9ghdZmkf65xIcFmd9gmafLcKXBjJ8nRpuqSOZj5Q",
	"7BNUQaenS9OnuwTXjukCMlsAE7o8FaxY2Zp1UQXNMSHntIiJH4Q82yW4w6gEqnWw79eIo7WKlwWj0d4x",
	"LPje9GwmAZY8AP1C+IwK4+BMqTw2s37fZhLcc6bDTYnAcUCI5aBWa+jci8DzMG9Yqvmfl3d2v9lAvaQv",
	"IIPootIy6Ba7lK2CBeD3weB7CVd1Xjj2QAJXJ60hta2hKwHwRo9tFWVGczoJViEWeL/YZiyDfTGFamkk",
	"VHNROtHyrdxOwv7JB0rqTOlMmu4fMzn1HguoO5AGU6rh+nbn8avOzp1wfStsfZvIy9Or+/d/DVu3Oj9s",
	"dl79lEpQ93s8T2vqY/Z803hRAwnpfJ3X73XK5rR0RtbiA9Q03bxZK+fKmgUq49pI5O1cv3Gwdc9C3sLh",
	"bD3R0EsTbwMXQHICqyNiaefZYm9dsDTX3hZx7HiOv5FHG1GuVj75HM6b/XSUDO7+/Ofu5pNDW3mvRRSd",
	"FVJzh3Z1k9dzWvZNKJaJdPfXq6aHG/2vmZVlyUt31uZu39lzd7yZKRx5mo+Qb/t0tfzrLHanLphukGcC",
	"F9BbtlNmqQROcW3qIvBV4FPvcs744LyO5bY7u1u3MsZPfzTnmkLHlcFJDiId75gWoxTQwxagwrDd/wRw",
	"Hv+A0j+zco+m/3YFbfcraH/nZefG3SHLLaGH//4g+if55CY0o9Uscici3Nv8/uDq7b1fnu8/uBkPSfln",
	"QgkEcFGM7rEzeTuvBD/UcpOhk/HhOAhVTsvMUxzIFcbJl3BUTj3UPLoXtv+IIa5hTkBubkuyGKTR/ggm",
	"SSIPclFo/+sH+8+3VeuL3fHvtq917v6WaoPpKAWp0sDPwayLRvBNp9bbaZlzjC7XiFnsjkCrCPy9rb8P",
	"vvvdBnv/omxh0MZAI+gNFnPvmboQi2+OyTEkLOJx3yJp45RNenCaJnY3gZqLzX8DAAD//2IZ4n5yGwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
