openapi: 3.0.3
info:
  title: writedown
  description: writedown
  version: 1.0.0
tags:
  - name: ping
    description: 疎通確認
  - name: pages
    description: wikiページ
  - name: users
    description: ユーザー
  - name: tags
    description: ページのタグ
  - name: login
    description: ログイン
paths:
  /ping:
    get:
      tags:
        - ping
      summary: 疎通確認
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pong'
  /pages:
    post:
      tags:
        - pages
      summary: wikiページの作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newPage'
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/page'
  /pages/{pageID}:
    get:
      tags:
        - pages
      summary: wikiページの取得
      parameters:
        - name: pageID
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/page'
    patch:
      tags:
        - pages
      summary: wikiページの更新
      parameters:
        - name: pageID
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patchPage'
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/page'
    delete:
      tags:
        - pages
      summary: wikiページの削除
      parameters:
        - name: pageID
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Deleted successfully
  /pages/{pageID}/child:
    get:
      tags:
        - pages
      summary: wikiページの子ページ取得
      parameters:
        - name: pageID
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pageAbstract'
  /pages/{pageID}/tag:
    get:
      tags:
        - pages
        - tags
      summary: ページのタグ取得
      parameters:
        - name: pageID
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags'
        '404':
          description: Not Found
    post:
      tags:
        - pages
        - tags
      summary: ページにタグを追加
      parameters:
        - name: pageID
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tag'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - pages
        - tags
      summary: ページのタグを削除
      parameters:
        - name: pageID
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: tagID
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /pages/tag:
    get:
      tags:
        - pages
        - tags
      summary: タグに対応するページの一覧を取得
      parameters:
        - name: tagID
          in: query
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pageAbstract'
        '404':
          description: Not Found
  /users/signup:
    post:
      tags:
        - users
        - login
      summary: ユーザー登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
  /users/login:
    post:
      tags:
        - users
        - login
      summary: ログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /users/me:
    get:
      tags:
        - users
      summary: 自身のユーザー情報取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/me'
components:
  schemas:
    pong:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: pong
    newPage:
      type: object
      required:
        - parentID
        - name
        - body
        - creator
      properties:
        parentID:
          type: integer
          example: 1
        name:
          type: string
          example: page
        body:
          type: string
          example: wikiページの内容
        creator:
          type: string
          example: owner
    page:
      type: object
      required:
        - id
        - path
        - name
        - body
        - created_at
        - updated_at
        - creator
      properties:
        id:
          type: integer
          example: 1
        path:
          type: string
          example: /path/to/page
        name:
          type: string
          example: page
        body:
          type: string
          example: wikiページの内容
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        creator:
          type: string
          example: owner
    patchPage:
      type: object
      required:
        - id
        - name
        - body
        - creator
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: page
        body:
          type: string
          example: wikiページの内容
        creator:
          type: string
          example: owner
    pageAbstract:
      type: object
      required:
        - id
        - path
        - title
      properties:
        id:
          type: integer
          example: 1
        path:
          type: string
          example: /path/to/page
        title:
          type: string
          example: title
    tag:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: タグID
        name:
          type: string
          example: tag
          description: タグ名
      required:
        - id
        - name
    tags:
      type: array
      items:
        $ref: '#/components/schemas/tag'
    login:
      type: object
      properties:
        username:
          type: string
          example: username
          description: ユーザー名
        password:
          type: string
          format: password
          example: password
          description: パスワード
      required:
        - username
        - password
    me:
      type: object
      properties:
        username:
          type: string
          description: ユーザー名
      required:
        - username
